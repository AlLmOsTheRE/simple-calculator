{"version":3,"sources":["components/Button.jsx","serviceWorker.js","index.js","App.js"],"names":["CustomButton","styled","button","buttonRole","value","Button","label","handleClick","onClick","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","CalculatorWrapper","div","Display","SecondaryDisplay","KeyboardWrapper","state","displayValue","secondaryDisplayValue","inOperation","handleButtonClick","buttonValue","role","newState","finalValue","eval","isNaN","newSecondaryValue","setState","this","PureComponent"],"mappings":"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","file":"static/js/main.394230b0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst CustomButton = styled.button`\n  margin: 0;\n  border: 0;\n  min-height: 75px;\n  cursor: pointer;\n  background-color: white;\n  font-size: ${({ buttonRole }) =>\n    buttonRole === 'operation' ? '30pt' : '22pt'};\n\n  &:hover {\n    background-color: #f5f5f5;\n    transition: background-color 50ms ease;\n  }\n\n  color: ${({ buttonRole, value }) => {\n    if (buttonRole === 'operation' && value === '=') {\n      return '#ce518b';\n    }\n    if (buttonRole === 'operation') {\n      return '#018ad0';\n    }\n    if (buttonRole === 'clear') {\n      return '#a9a9a9';\n    }\n    return '#000';\n  }};\n`;\n\nconst Button = ({ value, label, handleClick, buttonRole }) => (\n  <CustomButton\n    onClick={() => handleClick(value, buttonRole)}\n    buttonRole={buttonRole}\n    value={value}\n  >\n    {label || value}\n  </CustomButton>\n);\n\nexport default Button;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Button from './components/Button';\n\nconst CalculatorWrapper = styled.div`\n  background: white;\n  border-radius: 10px;\n  min-width: 320px;\n  height: auto;\n  padding: 10px 0;\n`;\n\nconst Display = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-end;\n  padding: 15px 30px;\n  font-size: 22pt;\n  border-bottom: 1px solid #f3f3f3;\n`;\n\nconst SecondaryDisplay = styled(Display)`\n  font-size: 12pt;\n  padding: 0 30px;\n  color: #494949;\n  min-height: 20px;\n  border: none;\n`;\n\nconst KeyboardWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\n\nclass App extends PureComponent {\n  state = {\n    displayValue: '0',\n    secondaryDisplayValue: '',\n    inOperation: false,\n  };\n\n  handleButtonClick = (buttonValue, role) => {\n    const { displayValue, secondaryDisplayValue, inOperation } = this.state;\n    let newState = { ...this.state };\n\n    if (role === 'clear' && buttonValue === 'AC') {\n      // All clear\n      newState = { displayValue: '0', secondaryDisplayValue: '' };\n    } else if (role === 'clear' && buttonValue === 'CE') {\n      // Clear entry\n      newState = { displayValue: '0' };\n    } else if (role === 'operation' && buttonValue === '=') {\n      // Equals\n      // eslint-disable-next-line\n      const finalValue = eval(`${secondaryDisplayValue} ${displayValue}`);\n\n      newState = {\n        displayValue: isNaN(finalValue) ? 'Result is undefined' : finalValue,\n        secondaryDisplayValue: '',\n        inOperation: true,\n      };\n    } else if (role === 'operation') {\n      // Operations\n      let newSecondaryValue = '';\n      if (secondaryDisplayValue) {\n        newSecondaryValue = `${secondaryDisplayValue} ${displayValue} ${buttonValue}`;\n      } else {\n        newSecondaryValue = `${displayValue} ${buttonValue}`;\n      }\n\n      newState = {\n        secondaryDisplayValue: newSecondaryValue,\n        inOperation: true,\n      };\n    } else {\n      // Values\n      newState = {\n        displayValue:\n          displayValue === '0' || inOperation\n            ? buttonValue\n            : `${displayValue}${buttonValue}`,\n        inOperation: false,\n      };\n    }\n\n    return this.setState(newState);\n  };\n\n  render() {\n    const { displayValue, secondaryDisplayValue } = this.state;\n    return (\n      <CalculatorWrapper>\n        <SecondaryDisplay>{secondaryDisplayValue}</SecondaryDisplay>\n        <Display>{displayValue}</Display>\n        <KeyboardWrapper>\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"clear\"\n            value=\"AC\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"clear\"\n            value=\"CE\"\n          />\n          <div />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"operation\"\n            value=\"/\"\n            label=\"÷\"\n          />\n\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"7\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"8\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"9\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"operation\"\n            value=\"*\"\n            label=\"×\"\n          />\n\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"4\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"5\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"6\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"operation\"\n            value=\"-\"\n            label=\"−\"\n          />\n\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"1\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"2\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\"3\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"operation\"\n            value=\"+\"\n          />\n\n          <Button\n            value=\"0\"\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n          />\n          <div />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"value\"\n            value=\".\"\n          />\n          <Button\n            handleClick={this.handleButtonClick}\n            buttonRole=\"operation\"\n            value=\"=\"\n          />\n        </KeyboardWrapper>\n      </CalculatorWrapper>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}